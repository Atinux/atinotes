diff --git a/dist/module.d.mts b/dist/module.d.mts
index 4981b0e4e6bd39552de9571f256e01053fc8c6ff..fc8d9125769bff1724d32b4d64a2c18c79e12e5f 100644
--- a/dist/module.d.mts
+++ b/dist/module.d.mts
@@ -32,6 +32,12 @@ interface ModuleOptions {
         theme?: MdcThemeOptions;
         /**
          * Languages to be bundled loaded by Shiki
+         *
+         * All languages used has to be included in this list at build time, to create granular bundles.
+         *
+         * Unlike the `preload` option, when this option is provided, it will override the default languages.
+         *
+         * @default ['js','ts','vue','css','html','vue','shell']
          */
         langs?: (BundledLanguage | LanguageRegistration)[];
         /**
diff --git a/dist/module.d.ts b/dist/module.d.ts
index 2173adeab0cf081fb085ff2b1d9a8f18af213bc6..0921c2f9d89d9c749dfd0aa7e63ddbdf1dae1310 100644
--- a/dist/module.d.ts
+++ b/dist/module.d.ts
@@ -32,6 +32,12 @@ interface ModuleOptions {
         theme?: MdcThemeOptions;
         /**
          * Languages to be bundled loaded by Shiki
+         *
+         * All languages used has to be included in this list at build time, to create granular bundles.
+         *
+         * Unlike the `preload` option, when this option is provided, it will override the default languages.
+         *
+         * @default ['js','ts','vue','css','html','vue','shell']
          */
         langs?: (BundledLanguage | LanguageRegistration)[];
         /**
diff --git a/dist/module.mjs b/dist/module.mjs
index a338b5bb3396404c0975bab62c54359b35bebfc9..38945d38590b0c153f5cf495e00ba105182203a2 100644
--- a/dist/module.mjs
+++ b/dist/module.mjs
@@ -55,7 +55,8 @@ async function mdcConfigs({ options }) {
 async function mdcHighlighter({
   options: {
     shikiPath,
-    options
+    options,
+    useWasmAssets
   }
 }) {
   if (!options || !options.highlighter)
@@ -67,7 +68,14 @@ async function mdcHighlighter({
     ].find((file2) => existsSync(file2));
     if (!file)
       throw new Error(`[@nuxtjs/mdc] Could not find shiki highlighter: ${shikiPath}`);
-    const code = await fs.readFile(file, "utf-8");
+    let code = await fs.readFile(file, "utf-8");
+    if (useWasmAssets) {
+      code = code.replace(
+        /import\((['"])shiki\/wasm\1\)/,
+        // We can remove the .client condition once Vite supports WASM ESM import
+        `import.meta.client ? import('shiki/wasm') : import('shiki/onig.wasm')`
+      );
+    }
     const { bundledLanguagesInfo } = await import('shiki/langs');
     const langsMap = /* @__PURE__ */ new Map();
     options.langs?.forEach((lang) => {
@@ -201,6 +209,8 @@ const module = defineNuxtModule({
           if (nitro.options.experimental?.wasm) {
             return;
           }
+          _nitro.options.alias = _nitro.options.alias || {};
+          _nitro.options.alias["shiki/wasm"] = "shiki/onig.wasm";
           _nitro.options.externals = _nitro.options.externals || {};
           _nitro.options.externals.inline = _nitro.options.externals.inline || [];
           _nitro.options.externals.inline.push((id) => id.endsWith(".wasm"));
@@ -266,7 +276,9 @@ const module = defineNuxtModule({
       getContents: mdcHighlighter,
       options: {
         shikiPath: resolver.resolve("../dist/runtime/highlighter/shiki"),
-        options: options.highlight
+        options: options.highlight,
+        // When WASM support enabled in Nitro, we could use the .wasm file directly for Cloudflare Workers
+        useWasmAssets: !nuxt.options.dev && !!nuxt.options.nitro.experimental?.wasm
       }
     });
     registerTemplate({